Index: API/Model.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once('../config/Conf.php');\r\n\r\nclass Model {\r\n\r\n    public static $pdo;\r\n\r\n    public static function init_pdo() {\r\n        $host   = Conf::getHostname();\r\n        $dbname = Conf::getDatabase();\r\n        $login  = Conf::getLogin();\r\n        $pass   = Conf::getPassword();\r\n        try {\r\n            // connexion à la base de données\r\n            // le dernier argument sert à ce que toutes les chaines de charactères\r\n            // en entrée et sortie de MySql soit dans le codage UTF-8\r\n            self::$pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $login, $pass, array(PDO::MYSQL_ATTR_INIT_COMMAND => \"SET NAMES utf8\"));\r\n            // on active le mode d'affichage des erreurs, et le lancement d'exception en cas d'erreur\r\n            self::$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n        } catch (PDOException $ex) {\r\n            echo $ex->getMessage();\r\n            die(\"Problème lors de la connexion à la base de données.\");\r\n        }\r\n    }\r\n\r\n    public static function getAllIngrediants($name,$order){\r\n        try {\r\n            $sql = \"SELECT id_ingrediant,nom_ingrediant,u.nom_unite,prix_ingrediant,ca.nom_categorie_allergene,c.nom_categorie,t.categorie_tva,t.valeur_tva\r\nFROM `Ingrediant` i \r\nJOIN Unite u ON u.id_unite=i.id_unite\r\nJOIN categorie c ON c.id_categorie=i.id_categorie\r\nJOIN tva t ON t.id_tva=i.id_tva \r\nJOIN categorie_allergene ca ON ca.id_categorie_allergene=i.id_categorie_allergene\r\nWHERE nom_ingrediant REGEXP \\\"^$name.*\\\" ORDER BY $order\";\r\n            //var_dump($sql);\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $req_prep->execute();\r\n            $req_prep->setFetchMode(PDO::FETCH_OBJ);\r\n            $tabResults = $req_prep->fetchAll();\r\n            return $tabResults;\r\n        } catch (PDOException $e) {\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n    }\r\n\r\n    public static function ajouterIngrediant($nom_ingrediant,$id_unite,$prix_ingrediant,$est_allergene,$id_categorie,$id_tva){\r\n        try {\r\n            $sql = \"INSERT INTO `Ingrediant` (nom_ingrediant,id_unite,prix_ingrediant,id_categorie_allergene,id_categorie,id_tva) VALUES (:name, :id_unite, :prix_ingrediant, :est_allergene, :id_categorie, :id_tva)\";\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $values = array(\"name\" => $nom_ingrediant,\r\n                \"id_unite\" => $id_unite,\r\n                \"prix_ingrediant\" => $prix_ingrediant,\r\n                \"est_allergene\" => $est_allergene,\r\n                \"id_categorie\" => $id_categorie,\r\n                \"id_tva\" => $id_tva);\r\n\r\n            $req_prep->execute($values);\r\n        } catch (PDOException $e){\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n\r\n    }\r\n\r\n    public static function modifierIngrediant($id_ingrediant,$nom_ingrediant,$id_unite,$prix_ingrediant,$id_categorie_allergene,$id_categorie,$id_tva){\r\n        try {\r\n            $sql = \"UPDATE `Ingrediant` \r\n                    SET nom_ingrediant= :name,id_unite= :id_unite,prix_ingrediant=:prix_ingrediant,id_categorie_allergene=:categorie_allergene,id_categorie=:id_categorie,id_tva=:id_tva\r\n                    WHERE id_ingrediant = :id\";\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $values = array(\"id\" => $id_ingrediant,\r\n                \"name\" => $nom_ingrediant,\r\n                \"id_unite\" => $id_unite,\r\n                \"prix_ingrediant\" => $prix_ingrediant,\r\n                \"categorie_allergene\" => $id_categorie_allergene,\r\n                \"id_categorie\" => $id_categorie,\r\n                \"id_tva\" => $id_tva);\r\n\r\n            $req_prep->execute($values);\r\n        } catch (PDOException $e){\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n\r\n    }\r\n\r\n    //copie colle de la fonction du dessus a adapter\r\n    /*public static function modifierIngrediant($nom_ingrediant,$id_unite,$prix_ingrediant,$est_allergene,$id_categorie,$id_tva){\r\n        try {\r\n            $sql = \"INSERT INTO `Ingrediant` (nom_ingrediant,id_unite,prix_ingrediant,est_allergene,id_categorie,id_tva) VALUES (:name, :id_unite, :prix_ingrediant, :est_allergene, :id_categorie, :id_tva)\";\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $values = array(\"name\" => $nom_ingrediant,\r\n                \"id_unite\" => $id_unite,\r\n                \"prix_ingrediant\" => $prix_ingrediant,\r\n                \"est_allergene\" => $est_allergene,\r\n                \"id_categorie\" => $id_categorie,\r\n                \"id_tva\" => $id_tva);\r\n\r\n            $req_prep->execute($values);\r\n        } catch (PDOException $e){\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n\r\n    }*/\r\n\r\n    public static function supprimerIngrediant($id_ingrediant){\r\n        try {\r\n            $sql = \"DELETE FROM `Ingrediant` WHERE id_ingrediant = :id\";\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $values = array(\"id\" => $id_ingrediant);\r\n\r\n            $req_prep->execute($values);\r\n\r\n        } catch (PDOException $e){\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n\r\n    }\r\n\r\n    public static function getAllUnite(){\r\n        try {\r\n            $sql = \"SELECT * FROM `Unite`\";\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $req_prep->execute();\r\n            $req_prep->setFetchMode(PDO::FETCH_OBJ);\r\n            return $req_prep->fetchAll();\r\n        } catch (PDOException $e){\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n    }\r\n\r\n    public static function getAllCategorie_Allergene(){\r\n        try {\r\n            $sql = \"SELECT * FROM `categorie_allergene`\";\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $req_prep->execute();\r\n            $req_prep->setFetchMode(PDO::FETCH_OBJ);\r\n            return $req_prep->fetchAll();\r\n        } catch (PDOException $e){\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n    }\r\n\r\n    public static function getAllCategorie(){\r\n        try {\r\n            $sql = \"SELECT * FROM `categorie`\";\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $req_prep->execute();\r\n            $req_prep->setFetchMode(PDO::FETCH_OBJ);\r\n            return $req_prep->fetchAll();\r\n        } catch (PDOException $e){\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n    }\r\n\r\n    public static function getAllTVA(){\r\n        try {\r\n            $sql = \"SELECT * FROM `tva`\";\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $req_prep->execute();\r\n            $req_prep->setFetchMode(PDO::FETCH_OBJ);\r\n            return $req_prep->fetchAll();\r\n        } catch (PDOException $e){\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n    }\r\n\r\n\r\n    /* logiquement fonction inutile\r\n    public static function getUnitebyId($id){\r\n        try {\r\n            $sql = \"SELECT FROM `Unite` WHERE id_unite = :id\";\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $values = array(\"id\" => $id);\r\n\r\n            $req_prep->execute($values);\r\n            $req_prep->setFetchMode(PDO::FETCH_OBJ);\r\n            $tabResults = $req_prep->fetchAll();\r\n            return $tabResults;\r\n        } catch (PDOException $e){\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n    }*/\r\n\r\n\r\n    /*\r\n    public static function ajouterAdherent($name){\r\n        $sql = \"INSERT INTO adherent (nomAdherent) VALUES (:name_tag)\";\r\n        $req_prep = self::$pdo->prepare($sql);\r\n\r\n        $values = array(\"name_tag\" => $name);\r\n\r\n        $req_prep->execute($values);\r\n    }\r\n\r\n    public static function ajouterLivre($titre){\r\n        $sql = \"INSERT INTO livre (titreLivre) VALUES (:name_tag)\";\r\n        $req_prep = self::$pdo->prepare($sql);\r\n\r\n        $values = array(\"name_tag\" => $titre);\r\n\r\n        $req_prep->execute($values);\r\n    }\r\n\r\n    public static function getAllAdherent(){\r\n        try {\r\n            $sql = \"SELECT adherent.idAdherent, nomAdherent, COUNT(e.idAdherent) AS nbEmprunts FROM `adherent` LEFT JOIN emprunt e ON e.idAdherent = adherent.idAdherent GROUP BY adherent.idAdherent\";\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $req_prep->execute();\r\n            $req_prep->setFetchMode(PDO::FETCH_OBJ);\r\n            $tabResults = $req_prep->fetchAll();\r\n            return $tabResults;\r\n        } catch (PDOException $e) {\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n    }\r\n    // SELECT adherent.idAdherent, nomAdherent, COUNT(e.idAdherent) FROM `adherent` LEFT JOIN emprunt e ON e.idAdherent = adherent.idAdherent GROUP BY adherent.idAdherent\r\n\r\n    public static function getLivresDispo(){\r\n        try {\r\n            $sql = \"SELECT * FROM `livre` WHERE idLivre NOT IN(SELECT idLivre FROM `emprunt`)\";\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $req_prep->execute();\r\n            $req_prep->setFetchMode(PDO::FETCH_OBJ);\r\n            $tabResults = $req_prep->fetchAll();\r\n            return $tabResults;\r\n        } catch (PDOException $e) {\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n\r\n    }\r\n\r\n    public static function getLivresEmprunt(){\r\n        try {\r\n            $sql = \"SELECT l.titreLivre, e.idLivre, a.nomAdherent FROM livre l JOIN emprunt e ON e.idLivre = l.idLivre JOIN adherent a ON a.idAdherent = e.idAdherent\";\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $req_prep->execute();\r\n            $req_prep->setFetchMode(PDO::FETCH_OBJ);\r\n            $tabResults = $req_prep->fetchAll();\r\n            return $tabResults;\r\n        } catch (PDOException $e) {\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n\r\n    }\r\n\r\n    public static function getListEmprunts($idAdherent){\r\n    try {\r\n        $sql = \"SELECT titreLivre FROM livre WHERE idLivre IN (SELECT idLivre FROM `emprunt` WHERE idAdherent=:name_tag)\";\r\n        $req_prep = self::$pdo->prepare($sql);\r\n\r\n        $values = array(\"name_tag\" => $idAdherent);\r\n        $req_prep->execute($values);\r\n        $req_prep->setFetchMode(PDO::FETCH_OBJ);\r\n        $tabResults = $req_prep->fetchAll();\r\n        return $tabResults;\r\n    } catch (PDOException $e) {\r\n        echo $e->getMessage();\r\n        die(\"Erreur lors de la recherche dans la base de données.\");\r\n    }\r\n    }\r\n\r\n    public static function emprunterLivre($idLivre, $idAdherent){\r\n        $sql = \"INSERT INTO emprunt (idAdherent, idLivre) VALUES (:adherent, :livre)\";\r\n        $req_prep = self::$pdo->prepare($sql);\r\n        $values = array(\"livre\" => $idLivre,\r\n                            \"adherent\" => $idAdherent);\r\n        $req_prep->execute($values);\r\n    }\r\n\r\n    public static function rendreLivre($idLivre){\r\n        $sql = \"DELETE FROM emprunt WHERE idLivre=:livre\";\r\n        $req_prep = self::$pdo->prepare($sql);\r\n        $values = array(\"livre\" => $idLivre);\r\n        $req_prep->execute($values);\r\n    }\r\n\r\n    /*\r\n     try {\r\n            $sql = \"INSERT INTO adherent (nomAdherent) VALUES (:name_tag)\";\r\n            $req_prep = self::$pdo->prepare($sql);\r\n\r\n            $values = array(\"name_tag\" => $name);\r\n\r\n            $req_prep->execute($values);\r\n            $req_prep->setFetchMode(PDO::FETCH_OBJ);\r\n            $tabResults = $req_prep->fetchAll();\r\n            // renvoi du tableau de résultats\r\n            return $tabResults;\r\n        } catch (PDOException $e) {\r\n            echo $e->getMessage();\r\n            die(\"Erreur lors de la recherche dans la base de données.\");\r\n        }\r\n     */\r\n}\r\n\r\n// on initialise la connexion $pdo\r\nModel::init_pdo();\r\n\r\n?>\r\n
===================================================================
diff --git a/API/Model.php b/API/Model.php
--- a/API/Model.php	
+++ b/API/Model.php	
@@ -182,6 +182,40 @@
         }
     }
 
+    public static function getAllRecette($name,$order){
+            try {
+                $sql = "SELECT id_recette,nom_recette,nom_createur
+                        FROM `recette` r
+                        REGEXP \"^$name.*\" ORDER BY $order";
+                //var_dump($sql);
+                $req_prep = self::$pdo->prepare($sql);
+
+                $req_prep->execute();
+                $req_prep->setFetchMode(PDO::FETCH_OBJ);
+                $tabResults = $req_prep->fetchAll();
+                return $tabResults;
+            } catch (PDOException $e) {
+                echo $e->getMessage();
+                die("Erreur lors de la recherche dans la base de données.");
+            }
+        }
+
+    public static function supprimerRecette($id_recette){
+            try {
+                $sql = "DELETE FROM `recette` WHERE id_recette = :id";
+                $req_prep = self::$pdo->prepare($sql);
+
+                $values = array("id" => $id_recette);
+
+                $req_prep->execute($values);
+
+            } catch (PDOException $e){
+                echo $e->getMessage();
+                die("Erreur lors de la recherche dans la base de données.");
+            }
+
+        }
+
 
     /* logiquement fonction inutile
     public static function getUnitebyId($id){
